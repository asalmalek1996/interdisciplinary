# -*- coding: utf-8 -*-
"""pvlib without EPW.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14e1PP3YcxrhahuVqc-F2uR_RK_fjkhmv
"""

# ------------------------------------
# ‚úÖ INSTALL pvlib (if not installed)
# ------------------------------------
try:
    import pvlib
except ImportError:
    !pip install pvlib
    import pvlib

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import calendar

# -----------------------
# üîß CONFIGURATION
# -----------------------
LATITUDE = 45.07
LONGITUDE = 7.68
YEAR = 2024
MONTH = 4  # ‚¨ÖÔ∏èChange to the desired month

def estimate_svf(time, azimuth, zenith):
    return 0.4  # ‚¨ÖÔ∏è Fixed for now, replaceable later

month_name = calendar.month_name[MONTH]
start_date = pd.Timestamp(f"{YEAR}-{MONTH:02d}-01")
end_day = calendar.monthrange(YEAR, MONTH)[1]
end_date = pd.Timestamp(f"{YEAR}-{MONTH:02d}-{end_day}")
date_range = pd.date_range(start=start_date, end=end_date, freq='D')

# -----------------------
# üñºÔ∏è LOAD FISHEYE MASK
# -----------------------
fisheye_img = mpimg.imread('fisheye_mask1.png')
fisheye_mask = fisheye_img[:, :, 0] if fisheye_img.ndim == 3 else fisheye_img
height, width = fisheye_mask.shape
cx, cy = width / 2.0, height / 2.0
max_r = 0.5 * min(width, height)

# -----------------------
# üìê EQUISDISTANT PROJECTION
# -----------------------
def sunpos_to_fisheye_coords_equidistant(azimuth_deg, zenith_deg):
    f = max_r / np.radians(90)
    r = f * np.radians(zenith_deg)
    theta = np.radians(90.0 - azimuth_deg)
    x = cx + r * np.cos(theta)
    y = cy - r * np.sin(theta)
    return x, y

# -----------------------
# ‚òÄÔ∏è CALCULATIONS
# -----------------------
location = pvlib.location.Location(latitude=LATITUDE, longitude=LONGITUDE, tz='Etc/GMT-1')
combined_results = []
hourly_azimuths, hourly_zeniths, hour_labels = [], [], []

for hour in range(24):
    az_list, zen_list = [], []

    for day in date_range:
        time = pd.Timestamp(f"{day.date()} {hour:02d}:00", tz='Etc/GMT-1')
        solar_pos = location.get_solarposition(pd.DatetimeIndex([time]))
        clearsky = location.get_clearsky(pd.DatetimeIndex([time]), model='ineichen')
        row = solar_pos.iloc[0]

        if row['apparent_elevation'] > 0:
            az = row['azimuth']
            zen = row['zenith']
            elev = row['elevation']
            ghi = clearsky['ghi'].iloc[0]
            dhi = clearsky['dhi'].iloc[0]
            dni = clearsky['dni'].iloc[0]
            direct_hr = dni * np.cos(np.radians(zen)) if not np.isnan(dni) else np.nan
            svf = estimate_svf(time, az, zen)

            x_pix, y_pix = sunpos_to_fisheye_coords_equidistant(az, zen)
            cx_pix, cy_pix = int(round(x_pix)), int(round(y_pix))

            if 0 <= cx_pix < width and 0 <= cy_pix < height:
                mask_val = fisheye_mask[cy_pix, cx_pix]
                shaded = 'sunny' if mask_val > 0.5 else 'shaded'
                shaded_val = 1 if shaded == 'sunny' else 0
            else:
                shaded = 'shaded'
                shaded_val = 0

            # ‚úÖ  Component calculation
            diffuse_eff = dhi * svf
            direct_eff = direct_hr * shaded_val
            total_eff = diffuse_eff + direct_eff

            az_list.append(az)
            zen_list.append(zen)

            combined_results.append({
                'datetime': time,
                'date': time.date(),
                'time': time.time(),
                'month_label': month_name,
                'azimuth': az,
                'zenith': zen,
                'altitude': elev,
                'apparent_zenith': row['apparent_zenith'],
                'apparent_elevation': row['apparent_elevation'],
                'GHI': ghi,
                'DHI': dhi,
                'Direct_HR': direct_hr,
                'sunny/shaded': shaded,
                'shaded_value': shaded_val,
                'SVF': svf,
                'Diffuse_Effective': diffuse_eff,
                'Direct_Effective': direct_eff,
                'Total_Effective_Irradiance': total_eff
            })

    if az_list:
        hourly_azimuths.append(np.mean(az_list))
        hourly_zeniths.append(np.mean(zen_list))
        hour_labels.append(f"{hour:02d}")

# -----------------------
# # -----------------------
# üåû PLOT FISHEYE SUNPATH + SAVE PNG
# -----------------------
fig, ax = plt.subplots(figsize=(6, 6))
ax.imshow(fisheye_mask, cmap='gray', origin='upper')

for alt in range(10, 91, 10):
    r = (alt / 90.0) * max_r
    circle = plt.Circle((cx, cy), r, color='lime', fill=False, linestyle='--', linewidth=1)
    ax.add_patch(circle)
    ax.text(cx, cy - r, f"{alt}¬∞", color='lime', fontsize=8, ha='center', va='bottom')

for az, label in zip([0, 90, 180, 270], ['N', 'E', 'S', 'W']):
    theta = np.radians(90.0 - az)
    x_end = cx + max_r * np.cos(theta)
    y_end = cy - max_r * np.sin(theta)
    ax.plot([cx, x_end], [cy, y_end], color='green', linestyle=':', linewidth=2)
    ax.text(x_end, y_end, label, color='green', fontsize=15, weight='bold', ha='center', va='center')

x_points, y_points = [], []
for az, zen in zip(hourly_azimuths, hourly_zeniths):
    x, y = sunpos_to_fisheye_coords_equidistant(az, zen)
    x_points.append(x)
    y_points.append(y)

ax.plot(x_points, y_points, '-', color='orange', linewidth=2, label=f'Mean Sun Path - {month_name}')
for x, y, label in zip(x_points, y_points, hour_labels):
    ax.text(x, y + 10, label, color='orange', fontsize=7, ha='center')

ax.set_title(f"Average Sun Path for {month_name}", fontsize=12)
ax.axis('off')
ax.legend(loc='lower right')

# ‚úÖ Save figure as PNG
fig.savefig(f"sunpath_fisheye_{month_name.lower()}.png", dpi=300, bbox_inches='tight')
print(f"üì∏ Saved sun path image as 'sunpath_fisheye_{month_name.lower()}.png'")

# üëÅÔ∏è Display plot
plt.show()

# -----------------------
# üíæ OUTPUT TO CSVs
# -----------------------
df = pd.DataFrame(combined_results)
df.to_csv('sunpath_full_data.csv', index=False)
print("‚úÖ Saved full hourly data to 'sunpath_full_data.csv'")

df['hour'] = df['datetime'].dt.hour
df_hourly_mean = df.groupby('hour')[[
    'GHI', 'DHI', 'Direct_HR', 'Diffuse_Effective', 'Direct_Effective',
    'Total_Effective_Irradiance', 'SVF', 'shaded_value'
]].mean().reset_index()
df_hourly_mean.to_csv('sunpath_hourly_means.csv', index=False)
print("‚úÖ Saved hourly average data to 'sunpath_hourly_means.csv'")

# Preview
print("\nüìä Hourly Average Data:")
print(df_hourly_mean.head())