# -*- coding: utf-8 -*-
"""solar time.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hnZOB2cw72C8HPs5ja7eBzO4cDSIPrLH
"""

!pip install pvlib

# ‚úÖ IMPORTS
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import calendar
from datetime import timedelta
import pvlib

# üîß CONFIG
LATITUDE = 45.07
LONGITUDE = 7.68
YEAR = 2024
MONTH = 4
USE_EPW = True

# üìÅ LOAD EPW
if USE_EPW:
    df_raw = pd.read_csv('/content/Torino_IT-hour.csv')
    df_raw['datetime'] = pd.to_datetime({
        'year': df_raw['Year'],
        'month': df_raw['Month'],
        'day': df_raw['Day'],
        'hour': df_raw['Hour'],
        'minute': df_raw['Minute']
    }, utc=True)

    df_raw = df_raw.rename(columns={
        'Global Horizontal Radiation': 'ghi',
        'Diffuse Horizontal Radiation': 'dhi',
        'Direct Normal Radiation': 'dni'
    })

    epw_month_data = df_raw[df_raw['datetime'].dt.month == MONTH].copy()
    epw_month_data['mdh_key'] = epw_month_data['datetime'].dt.strftime('%m-%d-%H')
    lookup_dict = epw_month_data.set_index('mdh_key')[['ghi', 'dhi', 'dni']].to_dict(orient='index')

# üñºÔ∏è LOAD FISHEYE MASK
fisheye_img = mpimg.imread('fisheye_mask1.png')
fisheye_mask = fisheye_img[:, :, 0] if fisheye_img.ndim == 3 else fisheye_img
height, width = fisheye_mask.shape
cx, cy = width / 2.0, height / 2.0
max_r = 0.5 * min(width, height)

def sunpos_to_fisheye_coords_equidistant(azimuth_deg, zenith_deg):
    f = max_r / np.radians(90)
    r = f * np.radians(zenith_deg)
    theta = np.radians(90.0 - azimuth_deg)
    x = cx + r * np.cos(theta)
    y = cy - r * np.sin(theta)
    return x, y

# ‚òÄÔ∏è CALCULATIONS
location = pvlib.location.Location(latitude=LATITUDE, longitude=LONGITUDE, tz='Etc/GMT-1')
month_name = calendar.month_name[MONTH]
start_date = pd.Timestamp(f"{YEAR}-{MONTH:02d}-01", tz='Etc/GMT-1')
end_day = calendar.monthrange(YEAR, MONTH)[1]
end_date = pd.Timestamp(f"{YEAR}-{MONTH:02d}-{end_day}", tz='Etc/GMT-1')
date_range = pd.date_range(start=start_date, end=end_date, freq='D')

combined_results = []
hourly_azimuths, hourly_zeniths, hour_labels = [], [], []

def estimate_svf(time, azimuth, zenith):
    return 0.5

for hour in range(24):
    az_list, zen_list = [], []
    for day in date_range:
        clock_time = pd.Timestamp(f"{day.date()} {hour:02d}:00", tz='Etc/GMT-1')

        # ‚úÖ Calculating the equation of time
        day_of_year = clock_time.day_of_year
        b = 2 * np.pi * (day_of_year - 81) / 364
        eot = 9.87 * np.sin(2 * b) - 7.53 * np.cos(b) - 1.5 * np.sin(b)

        longitude_correction = 4 * (LONGITUDE - 15)
        time_offset = pd.to_timedelta(eot + longitude_correction, unit='m')
        solar_time_corrected = clock_time + time_offset

        solar_pos = location.get_solarposition(pd.DatetimeIndex([solar_time_corrected]))
        row = solar_pos.iloc[0]

        if row['apparent_elevation'] > 0:
            az = row['azimuth']
            zen = row['zenith']
            elev = row['elevation']

            if USE_EPW:
                key = f"{clock_time.month:02d}-{clock_time.day:02d}-{clock_time.hour:02d}"
                irr = lookup_dict.get(key, {'ghi': np.nan, 'dhi': np.nan, 'dni': np.nan})
                ghi = irr['ghi']
                dhi = irr['dhi']
                dni = irr['dni']
            else:
                clearsky = location.get_clearsky(pd.DatetimeIndex([solar_time_corrected]), model='ineichen')
                ghi = clearsky['ghi'].iloc[0]
                dhi = clearsky['dhi'].iloc[0]
                dni = clearsky['dni'].iloc[0]

            direct_hr = dni * np.cos(np.radians(zen)) if not np.isnan(dni) else np.nan
            svf = estimate_svf(solar_time_corrected, az, zen)
            x_pix, y_pix = sunpos_to_fisheye_coords_equidistant(az, zen)
            cx_pix, cy_pix = int(round(x_pix)), int(round(y_pix))

            shaded_val = 0
            if 0 <= cx_pix < width and 0 <= cy_pix < height:
                mask_val = fisheye_mask[cy_pix, cx_pix]
                shaded_val = 1 if mask_val > 0.5 else 0

            diffuse_eff = dhi * svf
            direct_eff = direct_hr * shaded_val
            total_eff = diffuse_eff + direct_eff

            az_list.append(az)
            zen_list.append(zen)

            combined_results.append({
                'datetime': solar_time_corrected,
                'clock_time': clock_time,
                'date': solar_time_corrected.date(),
                'hour': hour,
                'azimuth': az,
                'zenith': zen,
                'altitude': elev,
                'apparent_zenith': row['apparent_zenith'],
                'apparent_elevation': row['apparent_elevation'],
                'GHI': ghi,
                'DHI': dhi,
                'Direct_HR': direct_hr,
                'sunny/shaded': 'sunny' if shaded_val else 'shaded',
                'shaded_value': shaded_val,
                'SVF': svf,
                'Diffuse_Effective': diffuse_eff,
                'Direct_Effective': direct_eff,
                'Total_Effective_Irradiance': total_eff
            })

    if az_list:
        hourly_azimuths.append(np.mean(az_list))
        hourly_zeniths.append(np.mean(zen_list))
        hour_labels.append(f"{hour:02d}")

# üåû PLOT FISHEYE SUNPATH + SAVE PNG
fig, ax = plt.subplots(figsize=(6, 6))
ax.imshow(fisheye_mask, cmap='gray', origin='upper')

for alt in range(10, 91, 10):
    r = (alt / 90.0) * max_r
    circle = plt.Circle((cx, cy), r, color='lime', fill=False, linestyle='--', linewidth=1)
    ax.add_patch(circle)
    ax.text(cx, cy - r, f"{alt}¬∞", color='lime', fontsize=8, ha='center', va='bottom')

for az, label in zip([0, 90, 180, 270], ['N', 'E', 'S', 'W']):
    theta = np.radians(90.0 - az)
    x_end = cx + max_r * np.cos(theta)
    y_end = cy - max_r * np.sin(theta)
    ax.plot([cx, x_end], [cy, y_end], color='green', linestyle=':', linewidth=2)
    ax.text(x_end, y_end, label, color='green', fontsize=15, weight='bold', ha='center', va='center')

x_points, y_points = [], []
for az, zen in zip(hourly_azimuths, hourly_zeniths):
    x, y = sunpos_to_fisheye_coords_equidistant(az, zen)
    x_points.append(x)
    y_points.append(y)

ax.plot(x_points, y_points, '-', color='orange', linewidth=2, label=f'Mean Sun Path - {month_name}')
for x, y, label in zip(x_points, y_points, hour_labels):
    ax.text(x, y + 10, label, color='orange', fontsize=7, ha='center')

ax.set_title(f"Average Sun Path for {month_name} (Solar Time)", fontsize=12)
ax.axis('off')
ax.legend(loc='lower right')
fig.savefig(f"sunpath_fisheye_{month_name.lower()}_solartime.png", dpi=300, bbox_inches='tight')
print(f"üì∏ Saved sun path image as 'sunpath_fisheye_{month_name.lower()}_solartime.png'")
plt.show()

# üìÇ SAVE TO CSV
# üìÇ SAVE TO CSV
df = pd.DataFrame(combined_results)
df.to_csv('sunpath_full_data.csv', index=False)
print("‚úÖ Saved full hourly data to 'sunpath_full_data.csv'")

df['hour'] = df['datetime'].dt.hour
df_hourly_mean = df.groupby('hour')[[
    'GHI', 'DHI', 'Direct_HR', 'Diffuse_Effective', 'Direct_Effective',
    'Total_Effective_Irradiance', 'SVF', 'shaded_value'
]].mean().reset_index()

# üìù Rename columns for output
df_hourly_mean = df_hourly_mean.rename(columns={
    'DHI': 'Diffuse HI',
    'Direct_HR': 'Direct HI'
})

df_hourly_mean.to_csv('sunpath_hourly_means.csv', index=False)
print("‚úÖ Saved hourly average data to 'sunpath_hourly_means.csv'")

print("\nüìä Hourly Average Data:")
print(df_hourly_mean.head())







